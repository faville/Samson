//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Samson.Core.MinistryPlatform {
    using System.Data;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://thinkministry.com/", ConfigurationName="MinistryPlatform.apiSoap")]
    public interface apiSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://thinkministry.com/AuthenticateUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        Samson.Core.MinistryPlatform.AuthenticateUserResponse AuthenticateUser(Samson.Core.MinistryPlatform.AuthenticateUserRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://thinkministry.com/AuthenticateUser", ReplyAction="*")]
        System.Threading.Tasks.Task<Samson.Core.MinistryPlatform.AuthenticateUserResponse> AuthenticateUserAsync(Samson.Core.MinistryPlatform.AuthenticateUserRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://thinkministry.com/AuthenticateGUIDS", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        Samson.Core.MinistryPlatform.AuthenticateGUIDSResponse AuthenticateGUIDS(Samson.Core.MinistryPlatform.AuthenticateGUIDSRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://thinkministry.com/AuthenticateGUIDS", ReplyAction="*")]
        System.Threading.Tasks.Task<Samson.Core.MinistryPlatform.AuthenticateGUIDSResponse> AuthenticateGUIDSAsync(Samson.Core.MinistryPlatform.AuthenticateGUIDSRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://thinkministry.com/AuthenticateContactGUID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        Samson.Core.MinistryPlatform.AuthenticateContactGUIDResponse AuthenticateContactGUID(Samson.Core.MinistryPlatform.AuthenticateContactGUIDRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://thinkministry.com/AuthenticateContactGUID", ReplyAction="*")]
        System.Threading.Tasks.Task<Samson.Core.MinistryPlatform.AuthenticateContactGUIDResponse> AuthenticateContactGUIDAsync(Samson.Core.MinistryPlatform.AuthenticateContactGUIDRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://thinkministry.com/GetDomainGUID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetDomainGUID(string GUID, string Password, string ServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://thinkministry.com/GetDomainGUID", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetDomainGUIDAsync(string GUID, string Password, string ServerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://thinkministry.com/GetUserInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetUserInfo(string GUID, string Password, int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://thinkministry.com/GetUserInfo", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetUserInfoAsync(string GUID, string Password, int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://thinkministry.com/FindOrCreateUserAccount", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        Samson.Core.MinistryPlatform.FindOrCreateUserAccountResponse FindOrCreateUserAccount(Samson.Core.MinistryPlatform.FindOrCreateUserAccountRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://thinkministry.com/FindOrCreateUserAccount", ReplyAction="*")]
        System.Threading.Tasks.Task<Samson.Core.MinistryPlatform.FindOrCreateUserAccountResponse> FindOrCreateUserAccountAsync(Samson.Core.MinistryPlatform.FindOrCreateUserAccountRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://thinkministry.com/UpdateUserAccount", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string UpdateUserAccount(string GUID, string Password, int UserID, string FirstName, string LastName, string MobilePhone, string EmailAddress, string NewPassword, string MiddleName, string NickName, int PrefixID, int SuffixID, System.DateTime DOB, int GenderID, int MaritalStatusID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://thinkministry.com/UpdateUserAccount", ReplyAction="*")]
        System.Threading.Tasks.Task<string> UpdateUserAccountAsync(string GUID, string Password, int UserID, string FirstName, string LastName, string MobilePhone, string EmailAddress, string NewPassword, string MiddleName, string NickName, int PrefixID, int SuffixID, System.DateTime DOB, int GenderID, int MaritalStatusID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://thinkministry.com/UpdateUserPassword", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string UpdateUserPassword(string GUID, string Password, int UserID, string NewPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://thinkministry.com/UpdateUserPassword", ReplyAction="*")]
        System.Threading.Tasks.Task<string> UpdateUserPasswordAsync(string GUID, string Password, int UserID, string NewPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://thinkministry.com/ResetPassword", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        Samson.Core.MinistryPlatform.ResetPasswordResponse ResetPassword(Samson.Core.MinistryPlatform.ResetPasswordRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://thinkministry.com/ResetPassword", ReplyAction="*")]
        System.Threading.Tasks.Task<Samson.Core.MinistryPlatform.ResetPasswordResponse> ResetPasswordAsync(Samson.Core.MinistryPlatform.ResetPasswordRequest request);
        
        // CODEGEN: Parameter 'FileContents' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="http://thinkministry.com/AttachFile", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        Samson.Core.MinistryPlatform.AttachFileResponse AttachFile(Samson.Core.MinistryPlatform.AttachFileRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://thinkministry.com/AttachFile", ReplyAction="*")]
        System.Threading.Tasks.Task<Samson.Core.MinistryPlatform.AttachFileResponse> AttachFileAsync(Samson.Core.MinistryPlatform.AttachFileRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://thinkministry.com/UpdateDefaultImage", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string UpdateDefaultImage(string GUID, string Password, int PageID, int RecordID, string UniqueName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://thinkministry.com/UpdateDefaultImage", ReplyAction="*")]
        System.Threading.Tasks.Task<string> UpdateDefaultImageAsync(string GUID, string Password, int PageID, int RecordID, string UniqueName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://thinkministry.com/AddRecord", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string AddRecord(string GUID, string Password, int UserID, string TableName, string PrimaryKeyField, string RequestString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://thinkministry.com/AddRecord", ReplyAction="*")]
        System.Threading.Tasks.Task<string> AddRecordAsync(string GUID, string Password, int UserID, string TableName, string PrimaryKeyField, string RequestString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://thinkministry.com/GetRecurringRecords", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetRecurringRecords(
                    string GUID, 
                    string Password, 
                    int Pattern, 
                    int Frequency, 
                    System.DateTime StartBy, 
                    System.DateTime EndBy, 
                    int EndAfter, 
                    int SpecificDay, 
                    int OrderDay, 
                    int SpecificMonth, 
                    bool Sunday, 
                    bool Monday, 
                    bool Tuesday, 
                    bool Wednesday, 
                    bool Thursday, 
                    bool Friday, 
                    bool Saturday);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://thinkministry.com/GetRecurringRecords", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetRecurringRecordsAsync(
                    string GUID, 
                    string Password, 
                    int Pattern, 
                    int Frequency, 
                    System.DateTime StartBy, 
                    System.DateTime EndBy, 
                    int EndAfter, 
                    int SpecificDay, 
                    int OrderDay, 
                    int SpecificMonth, 
                    bool Sunday, 
                    bool Monday, 
                    bool Tuesday, 
                    bool Wednesday, 
                    bool Thursday, 
                    bool Friday, 
                    bool Saturday);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://thinkministry.com/GetFirstDateInSeries", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.DateTime GetFirstDateInSeries(
                    string GUID, 
                    string Password, 
                    int Pattern, 
                    int Frequency, 
                    System.DateTime StartBy, 
                    System.DateTime EndBy, 
                    int EndAfter, 
                    int SpecificDay, 
                    int OrderDay, 
                    int SpecificMonth, 
                    bool Sunday, 
                    bool Monday, 
                    bool Tuesday, 
                    bool Wednesday, 
                    bool Thursday, 
                    bool Friday, 
                    bool Saturday);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://thinkministry.com/GetFirstDateInSeries", ReplyAction="*")]
        System.Threading.Tasks.Task<System.DateTime> GetFirstDateInSeriesAsync(
                    string GUID, 
                    string Password, 
                    int Pattern, 
                    int Frequency, 
                    System.DateTime StartBy, 
                    System.DateTime EndBy, 
                    int EndAfter, 
                    int SpecificDay, 
                    int OrderDay, 
                    int SpecificMonth, 
                    bool Sunday, 
                    bool Monday, 
                    bool Tuesday, 
                    bool Wednesday, 
                    bool Thursday, 
                    bool Friday, 
                    bool Saturday);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://thinkministry.com/AddRecurringRecords", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string AddRecurringRecords(
                    string GUID, 
                    string Password, 
                    int UserID, 
                    string TableName, 
                    string PrimaryKeyField, 
                    string RequestString, 
                    string csvSubTabsToCopy, 
                    int CopySubTabsFromRecordID, 
                    int Pattern, 
                    int Frequency, 
                    System.DateTime StartBy, 
                    System.DateTime EndBy, 
                    int EndAfter, 
                    int SpecificDay, 
                    int OrderDay, 
                    int SpecificMonth, 
                    bool Sunday, 
                    bool Monday, 
                    bool Tuesday, 
                    bool Wednesday, 
                    bool Thursday, 
                    bool Friday, 
                    bool Saturday);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://thinkministry.com/AddRecurringRecords", ReplyAction="*")]
        System.Threading.Tasks.Task<string> AddRecurringRecordsAsync(
                    string GUID, 
                    string Password, 
                    int UserID, 
                    string TableName, 
                    string PrimaryKeyField, 
                    string RequestString, 
                    string csvSubTabsToCopy, 
                    int CopySubTabsFromRecordID, 
                    int Pattern, 
                    int Frequency, 
                    System.DateTime StartBy, 
                    System.DateTime EndBy, 
                    int EndAfter, 
                    int SpecificDay, 
                    int OrderDay, 
                    int SpecificMonth, 
                    bool Sunday, 
                    bool Monday, 
                    bool Tuesday, 
                    bool Wednesday, 
                    bool Thursday, 
                    bool Friday, 
                    bool Saturday);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://thinkministry.com/UpdateRecord", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string UpdateRecord(string GUID, string Password, int UserID, string TableName, string PrimaryKeyField, string RequestString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://thinkministry.com/UpdateRecord", ReplyAction="*")]
        System.Threading.Tasks.Task<string> UpdateRecordAsync(string GUID, string Password, int UserID, string TableName, string PrimaryKeyField, string RequestString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://thinkministry.com/GetGridData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        Samson.Core.MinistryPlatform.GetGridDataResponse GetGridData(Samson.Core.MinistryPlatform.GetGridDataRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://thinkministry.com/GetGridData", ReplyAction="*")]
        System.Threading.Tasks.Task<Samson.Core.MinistryPlatform.GetGridDataResponse> GetGridDataAsync(Samson.Core.MinistryPlatform.GetGridDataRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://thinkministry.com/GetGridDataAdvanced", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        Samson.Core.MinistryPlatform.GetGridDataAdvancedResponse GetGridDataAdvanced(Samson.Core.MinistryPlatform.GetGridDataAdvancedRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://thinkministry.com/GetGridDataAdvanced", ReplyAction="*")]
        System.Threading.Tasks.Task<Samson.Core.MinistryPlatform.GetGridDataAdvancedResponse> GetGridDataAdvancedAsync(Samson.Core.MinistryPlatform.GetGridDataAdvancedRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://thinkministry.com/GetGridDataFull", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        Samson.Core.MinistryPlatform.GetGridDataFullResponse GetGridDataFull(Samson.Core.MinistryPlatform.GetGridDataFullRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://thinkministry.com/GetGridDataFull", ReplyAction="*")]
        System.Threading.Tasks.Task<Samson.Core.MinistryPlatform.GetGridDataFullResponse> GetGridDataFullAsync(Samson.Core.MinistryPlatform.GetGridDataFullRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://thinkministry.com/GetCommunicationsData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetCommunicationsData(string GUID, string Password, int UserID, int PageID, int ViewID, int SelectionID, int PageNumber, string OrderBy, string SearchTerm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://thinkministry.com/GetCommunicationsData", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetCommunicationsDataAsync(string GUID, string Password, int UserID, int PageID, int ViewID, int SelectionID, int PageNumber, string OrderBy, string SearchTerm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://thinkministry.com/GetFormData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetFormData(string GUID, string Password, int TabID, int RecordID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://thinkministry.com/GetFormData", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetFormDataAsync(string GUID, string Password, int TabID, int RecordID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://thinkministry.com/ExecuteStoredProcedure", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet ExecuteStoredProcedure(string GUID, string Password, string StoredProcedureName, string RequestString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://thinkministry.com/ExecuteStoredProcedure", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> ExecuteStoredProcedureAsync(string GUID, string Password, string StoredProcedureName, string RequestString);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AuthenticateUser", WrapperNamespace="http://thinkministry.com/", IsWrapped=true)]
    public partial class AuthenticateUserRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=0)]
        public string UserName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=1)]
        public string Password;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=2)]
        public string ServerName;
        
        public AuthenticateUserRequest() {
        }
        
        public AuthenticateUserRequest(string UserName, string Password, string ServerName) {
            this.UserName = UserName;
            this.Password = Password;
            this.ServerName = ServerName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AuthenticateUserResponse", WrapperNamespace="http://thinkministry.com/", IsWrapped=true)]
    public partial class AuthenticateUserResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=0)]
        public int FirstOutParameter;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=1)]
        public int UserID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=2)]
        public int ContactID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=3)]
        public int DomainID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=4)]
        public string DomainGUID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=5)]
        public string UserGUID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=6)]
        public string DisplayName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=7)]
        public string ContactEmail;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=8)]
        public string ExternalURL;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=9)]
        public bool CanImpersonate;
        
        public AuthenticateUserResponse() {
        }
        
        public AuthenticateUserResponse(int FirstOutParameter, int UserID, int ContactID, int DomainID, string DomainGUID, string UserGUID, string DisplayName, string ContactEmail, string ExternalURL, bool CanImpersonate) {
            this.FirstOutParameter = FirstOutParameter;
            this.UserID = UserID;
            this.ContactID = ContactID;
            this.DomainID = DomainID;
            this.DomainGUID = DomainGUID;
            this.UserGUID = UserGUID;
            this.DisplayName = DisplayName;
            this.ContactEmail = ContactEmail;
            this.ExternalURL = ExternalURL;
            this.CanImpersonate = CanImpersonate;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AuthenticateGUIDS", WrapperNamespace="http://thinkministry.com/", IsWrapped=true)]
    public partial class AuthenticateGUIDSRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=0)]
        public string UserGUID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=1)]
        public string DomainGUID;
        
        public AuthenticateGUIDSRequest() {
        }
        
        public AuthenticateGUIDSRequest(string UserGUID, string DomainGUID) {
            this.UserGUID = UserGUID;
            this.DomainGUID = DomainGUID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AuthenticateGUIDSResponse", WrapperNamespace="http://thinkministry.com/", IsWrapped=true)]
    public partial class AuthenticateGUIDSResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=0)]
        public int FirstOutParameter;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=1)]
        public int UserID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=2)]
        public string UserName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=3)]
        public int ContactID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=4)]
        public int DomainID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=5)]
        public string DisplayName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=6)]
        public string ContactEmail;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=7)]
        public string ExternalURL;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=8)]
        public bool CanImpersonate;
        
        public AuthenticateGUIDSResponse() {
        }
        
        public AuthenticateGUIDSResponse(int FirstOutParameter, int UserID, string UserName, int ContactID, int DomainID, string DisplayName, string ContactEmail, string ExternalURL, bool CanImpersonate) {
            this.FirstOutParameter = FirstOutParameter;
            this.UserID = UserID;
            this.UserName = UserName;
            this.ContactID = ContactID;
            this.DomainID = DomainID;
            this.DisplayName = DisplayName;
            this.ContactEmail = ContactEmail;
            this.ExternalURL = ExternalURL;
            this.CanImpersonate = CanImpersonate;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AuthenticateContactGUID", WrapperNamespace="http://thinkministry.com/", IsWrapped=true)]
    public partial class AuthenticateContactGUIDRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=0)]
        public string ContactGUID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=1)]
        public string DomainGUID;
        
        public AuthenticateContactGUIDRequest() {
        }
        
        public AuthenticateContactGUIDRequest(string ContactGUID, string DomainGUID) {
            this.ContactGUID = ContactGUID;
            this.DomainGUID = DomainGUID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AuthenticateContactGUIDResponse", WrapperNamespace="http://thinkministry.com/", IsWrapped=true)]
    public partial class AuthenticateContactGUIDResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=0)]
        public int FirstOutParameter;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=1)]
        public int UserID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=2)]
        public string UserName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=3)]
        public int ContactID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=4)]
        public int DomainID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=5)]
        public string DisplayName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=6)]
        public string ContactEmail;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=7)]
        public bool CanImpersonate;
        
        public AuthenticateContactGUIDResponse() {
        }
        
        public AuthenticateContactGUIDResponse(int FirstOutParameter, int UserID, string UserName, int ContactID, int DomainID, string DisplayName, string ContactEmail, bool CanImpersonate) {
            this.FirstOutParameter = FirstOutParameter;
            this.UserID = UserID;
            this.UserName = UserName;
            this.ContactID = ContactID;
            this.DomainID = DomainID;
            this.DisplayName = DisplayName;
            this.ContactEmail = ContactEmail;
            this.CanImpersonate = CanImpersonate;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="FindOrCreateUserAccount", WrapperNamespace="http://thinkministry.com/", IsWrapped=true)]
    public partial class FindOrCreateUserAccountRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=0)]
        public string GUID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=1)]
        public string Password;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=2)]
        public string FirstName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=3)]
        public string LastName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=4)]
        public string MobilePhone;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=5)]
        public string EmailAddress;
        
        public FindOrCreateUserAccountRequest() {
        }
        
        public FindOrCreateUserAccountRequest(string GUID, string Password, string FirstName, string LastName, string MobilePhone, string EmailAddress) {
            this.GUID = GUID;
            this.Password = Password;
            this.FirstName = FirstName;
            this.LastName = LastName;
            this.MobilePhone = MobilePhone;
            this.EmailAddress = EmailAddress;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="FindOrCreateUserAccountResponse", WrapperNamespace="http://thinkministry.com/", IsWrapped=true)]
    public partial class FindOrCreateUserAccountResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=0)]
        public System.Data.DataSet FindOrCreateUserAccountResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=1)]
        public int FirstOutParameter;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=2)]
        public int ContactID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=3)]
        public int UserID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=4)]
        public bool CreatedNewContact;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=5)]
        public bool CreatedNewUser;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=6)]
        public string NewPassword;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=7)]
        public string UserName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=8)]
        public string MessageResult;
        
        public FindOrCreateUserAccountResponse() {
        }
        
        public FindOrCreateUserAccountResponse(System.Data.DataSet FindOrCreateUserAccountResult, int FirstOutParameter, int ContactID, int UserID, bool CreatedNewContact, bool CreatedNewUser, string NewPassword, string UserName, string MessageResult) {
            this.FindOrCreateUserAccountResult = FindOrCreateUserAccountResult;
            this.FirstOutParameter = FirstOutParameter;
            this.ContactID = ContactID;
            this.UserID = UserID;
            this.CreatedNewContact = CreatedNewContact;
            this.CreatedNewUser = CreatedNewUser;
            this.NewPassword = NewPassword;
            this.UserName = UserName;
            this.MessageResult = MessageResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ResetPassword", WrapperNamespace="http://thinkministry.com/", IsWrapped=true)]
    public partial class ResetPasswordRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=0)]
        public string GUID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=1)]
        public string Password;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=2)]
        public string FirstName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=3)]
        public string EmailAddress;
        
        public ResetPasswordRequest() {
        }
        
        public ResetPasswordRequest(string GUID, string Password, string FirstName, string EmailAddress) {
            this.GUID = GUID;
            this.Password = Password;
            this.FirstName = FirstName;
            this.EmailAddress = EmailAddress;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ResetPasswordResponse", WrapperNamespace="http://thinkministry.com/", IsWrapped=true)]
    public partial class ResetPasswordResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=0)]
        public string ResetPasswordResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=1)]
        public int UserID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=2)]
        public string NewPassword;
        
        public ResetPasswordResponse() {
        }
        
        public ResetPasswordResponse(string ResetPasswordResult, int UserID, string NewPassword) {
            this.ResetPasswordResult = ResetPasswordResult;
            this.UserID = UserID;
            this.NewPassword = NewPassword;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AttachFile", WrapperNamespace="http://thinkministry.com/", IsWrapped=true)]
    public partial class AttachFileRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=0)]
        public string GUID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=1)]
        public string Password;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=2)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] FileContents;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=3)]
        public string FileName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=4)]
        public int PageID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=5)]
        public int RecordID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=6)]
        public string FileDescription;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=7)]
        public bool IsImage;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=8)]
        public int ResizeLongestDimension;
        
        public AttachFileRequest() {
        }
        
        public AttachFileRequest(string GUID, string Password, byte[] FileContents, string FileName, int PageID, int RecordID, string FileDescription, bool IsImage, int ResizeLongestDimension) {
            this.GUID = GUID;
            this.Password = Password;
            this.FileContents = FileContents;
            this.FileName = FileName;
            this.PageID = PageID;
            this.RecordID = RecordID;
            this.FileDescription = FileDescription;
            this.IsImage = IsImage;
            this.ResizeLongestDimension = ResizeLongestDimension;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AttachFileResponse", WrapperNamespace="http://thinkministry.com/", IsWrapped=true)]
    public partial class AttachFileResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=0)]
        public string AttachFileResult;
        
        public AttachFileResponse() {
        }
        
        public AttachFileResponse(string AttachFileResult) {
            this.AttachFileResult = AttachFileResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetGridData", WrapperNamespace="http://thinkministry.com/", IsWrapped=true)]
    public partial class GetGridDataRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=0)]
        public string GUID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=1)]
        public string Password;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=2)]
        public int TabID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=3)]
        public int ViewID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=4)]
        public string OrderBy;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=5)]
        public int PageNumber;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=6)]
        public string SearchTerm;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=7)]
        public bool ORSearch;
        
        public GetGridDataRequest() {
        }
        
        public GetGridDataRequest(string GUID, string Password, int TabID, int ViewID, string OrderBy, int PageNumber, string SearchTerm, bool ORSearch) {
            this.GUID = GUID;
            this.Password = Password;
            this.TabID = TabID;
            this.ViewID = ViewID;
            this.OrderBy = OrderBy;
            this.PageNumber = PageNumber;
            this.SearchTerm = SearchTerm;
            this.ORSearch = ORSearch;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetGridDataResponse", WrapperNamespace="http://thinkministry.com/", IsWrapped=true)]
    public partial class GetGridDataResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=0)]
        public System.Data.DataTable GetGridDataResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=1)]
        public int ResultsCount;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=2)]
        public string OrderByUsed;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=3)]
        public string ColumnList;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=4)]
        public string PrimaryKeyField;
        
        public GetGridDataResponse() {
        }
        
        public GetGridDataResponse(System.Data.DataTable GetGridDataResult, int ResultsCount, string OrderByUsed, string ColumnList, string PrimaryKeyField) {
            this.GetGridDataResult = GetGridDataResult;
            this.ResultsCount = ResultsCount;
            this.OrderByUsed = OrderByUsed;
            this.ColumnList = ColumnList;
            this.PrimaryKeyField = PrimaryKeyField;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetGridDataAdvanced", WrapperNamespace="http://thinkministry.com/", IsWrapped=true)]
    public partial class GetGridDataAdvancedRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=0)]
        public string GUID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=1)]
        public string Password;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=2)]
        public int UserID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=3)]
        public int TabID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=4)]
        public int ViewID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=5)]
        public string OrderBy;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=6)]
        public int PageNumber;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=7)]
        public string SearchTerm;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=8)]
        public int MonthFilter;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=9)]
        public int YearFilter;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=10)]
        public bool ORSearch;
        
        public GetGridDataAdvancedRequest() {
        }
        
        public GetGridDataAdvancedRequest(string GUID, string Password, int UserID, int TabID, int ViewID, string OrderBy, int PageNumber, string SearchTerm, int MonthFilter, int YearFilter, bool ORSearch) {
            this.GUID = GUID;
            this.Password = Password;
            this.UserID = UserID;
            this.TabID = TabID;
            this.ViewID = ViewID;
            this.OrderBy = OrderBy;
            this.PageNumber = PageNumber;
            this.SearchTerm = SearchTerm;
            this.MonthFilter = MonthFilter;
            this.YearFilter = YearFilter;
            this.ORSearch = ORSearch;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetGridDataAdvancedResponse", WrapperNamespace="http://thinkministry.com/", IsWrapped=true)]
    public partial class GetGridDataAdvancedResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=0)]
        public System.Data.DataTable GetGridDataAdvancedResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=1)]
        public int ResultsCount;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=2)]
        public string OrderByUsed;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=3)]
        public string ColumnList;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=4)]
        public string PrimaryKeyField;
        
        public GetGridDataAdvancedResponse() {
        }
        
        public GetGridDataAdvancedResponse(System.Data.DataTable GetGridDataAdvancedResult, int ResultsCount, string OrderByUsed, string ColumnList, string PrimaryKeyField) {
            this.GetGridDataAdvancedResult = GetGridDataAdvancedResult;
            this.ResultsCount = ResultsCount;
            this.OrderByUsed = OrderByUsed;
            this.ColumnList = ColumnList;
            this.PrimaryKeyField = PrimaryKeyField;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetGridDataFull", WrapperNamespace="http://thinkministry.com/", IsWrapped=true)]
    public partial class GetGridDataFullRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=0)]
        public string GUID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=1)]
        public string Password;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=2)]
        public int UserID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=3)]
        public int TabID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=4)]
        public int SelectionID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=5)]
        public int ViewID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=6)]
        public string OrderBy;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=7)]
        public int PageNumber;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=8)]
        public string SearchTerm;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=9)]
        public int MonthFilter;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=10)]
        public int YearFilter;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=11)]
        public bool ORSearch;
        
        public GetGridDataFullRequest() {
        }
        
        public GetGridDataFullRequest(string GUID, string Password, int UserID, int TabID, int SelectionID, int ViewID, string OrderBy, int PageNumber, string SearchTerm, int MonthFilter, int YearFilter, bool ORSearch) {
            this.GUID = GUID;
            this.Password = Password;
            this.UserID = UserID;
            this.TabID = TabID;
            this.SelectionID = SelectionID;
            this.ViewID = ViewID;
            this.OrderBy = OrderBy;
            this.PageNumber = PageNumber;
            this.SearchTerm = SearchTerm;
            this.MonthFilter = MonthFilter;
            this.YearFilter = YearFilter;
            this.ORSearch = ORSearch;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetGridDataFullResponse", WrapperNamespace="http://thinkministry.com/", IsWrapped=true)]
    public partial class GetGridDataFullResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=0)]
        public System.Data.DataTable GetGridDataFullResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=1)]
        public int ResultsCount;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=2)]
        public string OrderByUsed;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=3)]
        public string ColumnList;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://thinkministry.com/", Order=4)]
        public string PrimaryKeyField;
        
        public GetGridDataFullResponse() {
        }
        
        public GetGridDataFullResponse(System.Data.DataTable GetGridDataFullResult, int ResultsCount, string OrderByUsed, string ColumnList, string PrimaryKeyField) {
            this.GetGridDataFullResult = GetGridDataFullResult;
            this.ResultsCount = ResultsCount;
            this.OrderByUsed = OrderByUsed;
            this.ColumnList = ColumnList;
            this.PrimaryKeyField = PrimaryKeyField;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface apiSoapChannel : Samson.Core.MinistryPlatform.apiSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class apiSoapClient : System.ServiceModel.ClientBase<Samson.Core.MinistryPlatform.apiSoap>, Samson.Core.MinistryPlatform.apiSoap {
        
        public apiSoapClient() {
        }
        
        public apiSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public apiSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public apiSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public apiSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Samson.Core.MinistryPlatform.AuthenticateUserResponse Samson.Core.MinistryPlatform.apiSoap.AuthenticateUser(Samson.Core.MinistryPlatform.AuthenticateUserRequest request) {
            return base.Channel.AuthenticateUser(request);
        }
        
        public int AuthenticateUser(string UserName, string Password, string ServerName, out int UserID, out int ContactID, out int DomainID, out string DomainGUID, out string UserGUID, out string DisplayName, out string ContactEmail, out string ExternalURL, out bool CanImpersonate) {
            Samson.Core.MinistryPlatform.AuthenticateUserRequest inValue = new Samson.Core.MinistryPlatform.AuthenticateUserRequest();
            inValue.UserName = UserName;
            inValue.Password = Password;
            inValue.ServerName = ServerName;
            Samson.Core.MinistryPlatform.AuthenticateUserResponse retVal = ((Samson.Core.MinistryPlatform.apiSoap)(this)).AuthenticateUser(inValue);
            UserID = retVal.UserID;
            ContactID = retVal.ContactID;
            DomainID = retVal.DomainID;
            DomainGUID = retVal.DomainGUID;
            UserGUID = retVal.UserGUID;
            DisplayName = retVal.DisplayName;
            ContactEmail = retVal.ContactEmail;
            ExternalURL = retVal.ExternalURL;
            CanImpersonate = retVal.CanImpersonate;
            return retVal.FirstOutParameter;
        }
        
        public System.Threading.Tasks.Task<Samson.Core.MinistryPlatform.AuthenticateUserResponse> AuthenticateUserAsync(Samson.Core.MinistryPlatform.AuthenticateUserRequest request) {
            return base.Channel.AuthenticateUserAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Samson.Core.MinistryPlatform.AuthenticateGUIDSResponse Samson.Core.MinistryPlatform.apiSoap.AuthenticateGUIDS(Samson.Core.MinistryPlatform.AuthenticateGUIDSRequest request) {
            return base.Channel.AuthenticateGUIDS(request);
        }
        
        public int AuthenticateGUIDS(string UserGUID, string DomainGUID, out int UserID, out string UserName, out int ContactID, out int DomainID, out string DisplayName, out string ContactEmail, out string ExternalURL, out bool CanImpersonate) {
            Samson.Core.MinistryPlatform.AuthenticateGUIDSRequest inValue = new Samson.Core.MinistryPlatform.AuthenticateGUIDSRequest();
            inValue.UserGUID = UserGUID;
            inValue.DomainGUID = DomainGUID;
            Samson.Core.MinistryPlatform.AuthenticateGUIDSResponse retVal = ((Samson.Core.MinistryPlatform.apiSoap)(this)).AuthenticateGUIDS(inValue);
            UserID = retVal.UserID;
            UserName = retVal.UserName;
            ContactID = retVal.ContactID;
            DomainID = retVal.DomainID;
            DisplayName = retVal.DisplayName;
            ContactEmail = retVal.ContactEmail;
            ExternalURL = retVal.ExternalURL;
            CanImpersonate = retVal.CanImpersonate;
            return retVal.FirstOutParameter;
        }
        
        public System.Threading.Tasks.Task<Samson.Core.MinistryPlatform.AuthenticateGUIDSResponse> AuthenticateGUIDSAsync(Samson.Core.MinistryPlatform.AuthenticateGUIDSRequest request) {
            return base.Channel.AuthenticateGUIDSAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Samson.Core.MinistryPlatform.AuthenticateContactGUIDResponse Samson.Core.MinistryPlatform.apiSoap.AuthenticateContactGUID(Samson.Core.MinistryPlatform.AuthenticateContactGUIDRequest request) {
            return base.Channel.AuthenticateContactGUID(request);
        }
        
        public int AuthenticateContactGUID(string ContactGUID, string DomainGUID, out int UserID, out string UserName, out int ContactID, out int DomainID, out string DisplayName, out string ContactEmail, out bool CanImpersonate) {
            Samson.Core.MinistryPlatform.AuthenticateContactGUIDRequest inValue = new Samson.Core.MinistryPlatform.AuthenticateContactGUIDRequest();
            inValue.ContactGUID = ContactGUID;
            inValue.DomainGUID = DomainGUID;
            Samson.Core.MinistryPlatform.AuthenticateContactGUIDResponse retVal = ((Samson.Core.MinistryPlatform.apiSoap)(this)).AuthenticateContactGUID(inValue);
            UserID = retVal.UserID;
            UserName = retVal.UserName;
            ContactID = retVal.ContactID;
            DomainID = retVal.DomainID;
            DisplayName = retVal.DisplayName;
            ContactEmail = retVal.ContactEmail;
            CanImpersonate = retVal.CanImpersonate;
            return retVal.FirstOutParameter;
        }
        
        public System.Threading.Tasks.Task<Samson.Core.MinistryPlatform.AuthenticateContactGUIDResponse> AuthenticateContactGUIDAsync(Samson.Core.MinistryPlatform.AuthenticateContactGUIDRequest request) {
            return base.Channel.AuthenticateContactGUIDAsync(request);
        }
        
        public string GetDomainGUID(string GUID, string Password, string ServerName) {
            return base.Channel.GetDomainGUID(GUID, Password, ServerName);
        }
        
        public System.Threading.Tasks.Task<string> GetDomainGUIDAsync(string GUID, string Password, string ServerName) {
            return base.Channel.GetDomainGUIDAsync(GUID, Password, ServerName);
        }
        
        public System.Data.DataSet GetUserInfo(string GUID, string Password, int UserID) {
            return base.Channel.GetUserInfo(GUID, Password, UserID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetUserInfoAsync(string GUID, string Password, int UserID) {
            return base.Channel.GetUserInfoAsync(GUID, Password, UserID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Samson.Core.MinistryPlatform.FindOrCreateUserAccountResponse Samson.Core.MinistryPlatform.apiSoap.FindOrCreateUserAccount(Samson.Core.MinistryPlatform.FindOrCreateUserAccountRequest request) {
            return base.Channel.FindOrCreateUserAccount(request);
        }
        
        public System.Data.DataSet FindOrCreateUserAccount(string GUID, string Password, string FirstName, string LastName, string MobilePhone, string EmailAddress, out int FirstOutParameter, out int ContactID, out int UserID, out bool CreatedNewContact, out bool CreatedNewUser, out string NewPassword, out string UserName, out string MessageResult) {
            Samson.Core.MinistryPlatform.FindOrCreateUserAccountRequest inValue = new Samson.Core.MinistryPlatform.FindOrCreateUserAccountRequest();
            inValue.GUID = GUID;
            inValue.Password = Password;
            inValue.FirstName = FirstName;
            inValue.LastName = LastName;
            inValue.MobilePhone = MobilePhone;
            inValue.EmailAddress = EmailAddress;
            Samson.Core.MinistryPlatform.FindOrCreateUserAccountResponse retVal = ((Samson.Core.MinistryPlatform.apiSoap)(this)).FindOrCreateUserAccount(inValue);
            FirstOutParameter = retVal.FirstOutParameter;
            ContactID = retVal.ContactID;
            UserID = retVal.UserID;
            CreatedNewContact = retVal.CreatedNewContact;
            CreatedNewUser = retVal.CreatedNewUser;
            NewPassword = retVal.NewPassword;
            UserName = retVal.UserName;
            MessageResult = retVal.MessageResult;
            return retVal.FindOrCreateUserAccountResult;
        }
        
        public System.Threading.Tasks.Task<Samson.Core.MinistryPlatform.FindOrCreateUserAccountResponse> FindOrCreateUserAccountAsync(Samson.Core.MinistryPlatform.FindOrCreateUserAccountRequest request) {
            return base.Channel.FindOrCreateUserAccountAsync(request);
        }
        
        public string UpdateUserAccount(string GUID, string Password, int UserID, string FirstName, string LastName, string MobilePhone, string EmailAddress, string NewPassword, string MiddleName, string NickName, int PrefixID, int SuffixID, System.DateTime DOB, int GenderID, int MaritalStatusID) {
            return base.Channel.UpdateUserAccount(GUID, Password, UserID, FirstName, LastName, MobilePhone, EmailAddress, NewPassword, MiddleName, NickName, PrefixID, SuffixID, DOB, GenderID, MaritalStatusID);
        }
        
        public System.Threading.Tasks.Task<string> UpdateUserAccountAsync(string GUID, string Password, int UserID, string FirstName, string LastName, string MobilePhone, string EmailAddress, string NewPassword, string MiddleName, string NickName, int PrefixID, int SuffixID, System.DateTime DOB, int GenderID, int MaritalStatusID) {
            return base.Channel.UpdateUserAccountAsync(GUID, Password, UserID, FirstName, LastName, MobilePhone, EmailAddress, NewPassword, MiddleName, NickName, PrefixID, SuffixID, DOB, GenderID, MaritalStatusID);
        }
        
        public string UpdateUserPassword(string GUID, string Password, int UserID, string NewPassword) {
            return base.Channel.UpdateUserPassword(GUID, Password, UserID, NewPassword);
        }
        
        public System.Threading.Tasks.Task<string> UpdateUserPasswordAsync(string GUID, string Password, int UserID, string NewPassword) {
            return base.Channel.UpdateUserPasswordAsync(GUID, Password, UserID, NewPassword);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Samson.Core.MinistryPlatform.ResetPasswordResponse Samson.Core.MinistryPlatform.apiSoap.ResetPassword(Samson.Core.MinistryPlatform.ResetPasswordRequest request) {
            return base.Channel.ResetPassword(request);
        }
        
        public string ResetPassword(string GUID, string Password, string FirstName, string EmailAddress, out int UserID, out string NewPassword) {
            Samson.Core.MinistryPlatform.ResetPasswordRequest inValue = new Samson.Core.MinistryPlatform.ResetPasswordRequest();
            inValue.GUID = GUID;
            inValue.Password = Password;
            inValue.FirstName = FirstName;
            inValue.EmailAddress = EmailAddress;
            Samson.Core.MinistryPlatform.ResetPasswordResponse retVal = ((Samson.Core.MinistryPlatform.apiSoap)(this)).ResetPassword(inValue);
            UserID = retVal.UserID;
            NewPassword = retVal.NewPassword;
            return retVal.ResetPasswordResult;
        }
        
        public System.Threading.Tasks.Task<Samson.Core.MinistryPlatform.ResetPasswordResponse> ResetPasswordAsync(Samson.Core.MinistryPlatform.ResetPasswordRequest request) {
            return base.Channel.ResetPasswordAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Samson.Core.MinistryPlatform.AttachFileResponse Samson.Core.MinistryPlatform.apiSoap.AttachFile(Samson.Core.MinistryPlatform.AttachFileRequest request) {
            return base.Channel.AttachFile(request);
        }
        
        public string AttachFile(string GUID, string Password, byte[] FileContents, string FileName, int PageID, int RecordID, string FileDescription, bool IsImage, int ResizeLongestDimension) {
            Samson.Core.MinistryPlatform.AttachFileRequest inValue = new Samson.Core.MinistryPlatform.AttachFileRequest();
            inValue.GUID = GUID;
            inValue.Password = Password;
            inValue.FileContents = FileContents;
            inValue.FileName = FileName;
            inValue.PageID = PageID;
            inValue.RecordID = RecordID;
            inValue.FileDescription = FileDescription;
            inValue.IsImage = IsImage;
            inValue.ResizeLongestDimension = ResizeLongestDimension;
            Samson.Core.MinistryPlatform.AttachFileResponse retVal = ((Samson.Core.MinistryPlatform.apiSoap)(this)).AttachFile(inValue);
            return retVal.AttachFileResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Samson.Core.MinistryPlatform.AttachFileResponse> Samson.Core.MinistryPlatform.apiSoap.AttachFileAsync(Samson.Core.MinistryPlatform.AttachFileRequest request) {
            return base.Channel.AttachFileAsync(request);
        }
        
        public System.Threading.Tasks.Task<Samson.Core.MinistryPlatform.AttachFileResponse> AttachFileAsync(string GUID, string Password, byte[] FileContents, string FileName, int PageID, int RecordID, string FileDescription, bool IsImage, int ResizeLongestDimension) {
            Samson.Core.MinistryPlatform.AttachFileRequest inValue = new Samson.Core.MinistryPlatform.AttachFileRequest();
            inValue.GUID = GUID;
            inValue.Password = Password;
            inValue.FileContents = FileContents;
            inValue.FileName = FileName;
            inValue.PageID = PageID;
            inValue.RecordID = RecordID;
            inValue.FileDescription = FileDescription;
            inValue.IsImage = IsImage;
            inValue.ResizeLongestDimension = ResizeLongestDimension;
            return ((Samson.Core.MinistryPlatform.apiSoap)(this)).AttachFileAsync(inValue);
        }
        
        public string UpdateDefaultImage(string GUID, string Password, int PageID, int RecordID, string UniqueName) {
            return base.Channel.UpdateDefaultImage(GUID, Password, PageID, RecordID, UniqueName);
        }
        
        public System.Threading.Tasks.Task<string> UpdateDefaultImageAsync(string GUID, string Password, int PageID, int RecordID, string UniqueName) {
            return base.Channel.UpdateDefaultImageAsync(GUID, Password, PageID, RecordID, UniqueName);
        }
        
        public string AddRecord(string GUID, string Password, int UserID, string TableName, string PrimaryKeyField, string RequestString) {
            return base.Channel.AddRecord(GUID, Password, UserID, TableName, PrimaryKeyField, RequestString);
        }
        
        public System.Threading.Tasks.Task<string> AddRecordAsync(string GUID, string Password, int UserID, string TableName, string PrimaryKeyField, string RequestString) {
            return base.Channel.AddRecordAsync(GUID, Password, UserID, TableName, PrimaryKeyField, RequestString);
        }
        
        public System.Data.DataSet GetRecurringRecords(
                    string GUID, 
                    string Password, 
                    int Pattern, 
                    int Frequency, 
                    System.DateTime StartBy, 
                    System.DateTime EndBy, 
                    int EndAfter, 
                    int SpecificDay, 
                    int OrderDay, 
                    int SpecificMonth, 
                    bool Sunday, 
                    bool Monday, 
                    bool Tuesday, 
                    bool Wednesday, 
                    bool Thursday, 
                    bool Friday, 
                    bool Saturday) {
            return base.Channel.GetRecurringRecords(GUID, Password, Pattern, Frequency, StartBy, EndBy, EndAfter, SpecificDay, OrderDay, SpecificMonth, Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetRecurringRecordsAsync(
                    string GUID, 
                    string Password, 
                    int Pattern, 
                    int Frequency, 
                    System.DateTime StartBy, 
                    System.DateTime EndBy, 
                    int EndAfter, 
                    int SpecificDay, 
                    int OrderDay, 
                    int SpecificMonth, 
                    bool Sunday, 
                    bool Monday, 
                    bool Tuesday, 
                    bool Wednesday, 
                    bool Thursday, 
                    bool Friday, 
                    bool Saturday) {
            return base.Channel.GetRecurringRecordsAsync(GUID, Password, Pattern, Frequency, StartBy, EndBy, EndAfter, SpecificDay, OrderDay, SpecificMonth, Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday);
        }
        
        public System.DateTime GetFirstDateInSeries(
                    string GUID, 
                    string Password, 
                    int Pattern, 
                    int Frequency, 
                    System.DateTime StartBy, 
                    System.DateTime EndBy, 
                    int EndAfter, 
                    int SpecificDay, 
                    int OrderDay, 
                    int SpecificMonth, 
                    bool Sunday, 
                    bool Monday, 
                    bool Tuesday, 
                    bool Wednesday, 
                    bool Thursday, 
                    bool Friday, 
                    bool Saturday) {
            return base.Channel.GetFirstDateInSeries(GUID, Password, Pattern, Frequency, StartBy, EndBy, EndAfter, SpecificDay, OrderDay, SpecificMonth, Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday);
        }
        
        public System.Threading.Tasks.Task<System.DateTime> GetFirstDateInSeriesAsync(
                    string GUID, 
                    string Password, 
                    int Pattern, 
                    int Frequency, 
                    System.DateTime StartBy, 
                    System.DateTime EndBy, 
                    int EndAfter, 
                    int SpecificDay, 
                    int OrderDay, 
                    int SpecificMonth, 
                    bool Sunday, 
                    bool Monday, 
                    bool Tuesday, 
                    bool Wednesday, 
                    bool Thursday, 
                    bool Friday, 
                    bool Saturday) {
            return base.Channel.GetFirstDateInSeriesAsync(GUID, Password, Pattern, Frequency, StartBy, EndBy, EndAfter, SpecificDay, OrderDay, SpecificMonth, Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday);
        }
        
        public string AddRecurringRecords(
                    string GUID, 
                    string Password, 
                    int UserID, 
                    string TableName, 
                    string PrimaryKeyField, 
                    string RequestString, 
                    string csvSubTabsToCopy, 
                    int CopySubTabsFromRecordID, 
                    int Pattern, 
                    int Frequency, 
                    System.DateTime StartBy, 
                    System.DateTime EndBy, 
                    int EndAfter, 
                    int SpecificDay, 
                    int OrderDay, 
                    int SpecificMonth, 
                    bool Sunday, 
                    bool Monday, 
                    bool Tuesday, 
                    bool Wednesday, 
                    bool Thursday, 
                    bool Friday, 
                    bool Saturday) {
            return base.Channel.AddRecurringRecords(GUID, Password, UserID, TableName, PrimaryKeyField, RequestString, csvSubTabsToCopy, CopySubTabsFromRecordID, Pattern, Frequency, StartBy, EndBy, EndAfter, SpecificDay, OrderDay, SpecificMonth, Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday);
        }
        
        public System.Threading.Tasks.Task<string> AddRecurringRecordsAsync(
                    string GUID, 
                    string Password, 
                    int UserID, 
                    string TableName, 
                    string PrimaryKeyField, 
                    string RequestString, 
                    string csvSubTabsToCopy, 
                    int CopySubTabsFromRecordID, 
                    int Pattern, 
                    int Frequency, 
                    System.DateTime StartBy, 
                    System.DateTime EndBy, 
                    int EndAfter, 
                    int SpecificDay, 
                    int OrderDay, 
                    int SpecificMonth, 
                    bool Sunday, 
                    bool Monday, 
                    bool Tuesday, 
                    bool Wednesday, 
                    bool Thursday, 
                    bool Friday, 
                    bool Saturday) {
            return base.Channel.AddRecurringRecordsAsync(GUID, Password, UserID, TableName, PrimaryKeyField, RequestString, csvSubTabsToCopy, CopySubTabsFromRecordID, Pattern, Frequency, StartBy, EndBy, EndAfter, SpecificDay, OrderDay, SpecificMonth, Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday);
        }
        
        public string UpdateRecord(string GUID, string Password, int UserID, string TableName, string PrimaryKeyField, string RequestString) {
            return base.Channel.UpdateRecord(GUID, Password, UserID, TableName, PrimaryKeyField, RequestString);
        }
        
        public System.Threading.Tasks.Task<string> UpdateRecordAsync(string GUID, string Password, int UserID, string TableName, string PrimaryKeyField, string RequestString) {
            return base.Channel.UpdateRecordAsync(GUID, Password, UserID, TableName, PrimaryKeyField, RequestString);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Samson.Core.MinistryPlatform.GetGridDataResponse Samson.Core.MinistryPlatform.apiSoap.GetGridData(Samson.Core.MinistryPlatform.GetGridDataRequest request) {
            return base.Channel.GetGridData(request);
        }
        
        public System.Data.DataTable GetGridData(string GUID, string Password, int TabID, int ViewID, string OrderBy, int PageNumber, string SearchTerm, bool ORSearch, out int ResultsCount, out string OrderByUsed, out string ColumnList, out string PrimaryKeyField) {
            Samson.Core.MinistryPlatform.GetGridDataRequest inValue = new Samson.Core.MinistryPlatform.GetGridDataRequest();
            inValue.GUID = GUID;
            inValue.Password = Password;
            inValue.TabID = TabID;
            inValue.ViewID = ViewID;
            inValue.OrderBy = OrderBy;
            inValue.PageNumber = PageNumber;
            inValue.SearchTerm = SearchTerm;
            inValue.ORSearch = ORSearch;
            Samson.Core.MinistryPlatform.GetGridDataResponse retVal = ((Samson.Core.MinistryPlatform.apiSoap)(this)).GetGridData(inValue);
            ResultsCount = retVal.ResultsCount;
            OrderByUsed = retVal.OrderByUsed;
            ColumnList = retVal.ColumnList;
            PrimaryKeyField = retVal.PrimaryKeyField;
            return retVal.GetGridDataResult;
        }
        
        public System.Threading.Tasks.Task<Samson.Core.MinistryPlatform.GetGridDataResponse> GetGridDataAsync(Samson.Core.MinistryPlatform.GetGridDataRequest request) {
            return base.Channel.GetGridDataAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Samson.Core.MinistryPlatform.GetGridDataAdvancedResponse Samson.Core.MinistryPlatform.apiSoap.GetGridDataAdvanced(Samson.Core.MinistryPlatform.GetGridDataAdvancedRequest request) {
            return base.Channel.GetGridDataAdvanced(request);
        }
        
        public System.Data.DataTable GetGridDataAdvanced(string GUID, string Password, int UserID, int TabID, int ViewID, string OrderBy, int PageNumber, string SearchTerm, int MonthFilter, int YearFilter, bool ORSearch, out int ResultsCount, out string OrderByUsed, out string ColumnList, out string PrimaryKeyField) {
            Samson.Core.MinistryPlatform.GetGridDataAdvancedRequest inValue = new Samson.Core.MinistryPlatform.GetGridDataAdvancedRequest();
            inValue.GUID = GUID;
            inValue.Password = Password;
            inValue.UserID = UserID;
            inValue.TabID = TabID;
            inValue.ViewID = ViewID;
            inValue.OrderBy = OrderBy;
            inValue.PageNumber = PageNumber;
            inValue.SearchTerm = SearchTerm;
            inValue.MonthFilter = MonthFilter;
            inValue.YearFilter = YearFilter;
            inValue.ORSearch = ORSearch;
            Samson.Core.MinistryPlatform.GetGridDataAdvancedResponse retVal = ((Samson.Core.MinistryPlatform.apiSoap)(this)).GetGridDataAdvanced(inValue);
            ResultsCount = retVal.ResultsCount;
            OrderByUsed = retVal.OrderByUsed;
            ColumnList = retVal.ColumnList;
            PrimaryKeyField = retVal.PrimaryKeyField;
            return retVal.GetGridDataAdvancedResult;
        }
        
        public System.Threading.Tasks.Task<Samson.Core.MinistryPlatform.GetGridDataAdvancedResponse> GetGridDataAdvancedAsync(Samson.Core.MinistryPlatform.GetGridDataAdvancedRequest request) {
            return base.Channel.GetGridDataAdvancedAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Samson.Core.MinistryPlatform.GetGridDataFullResponse Samson.Core.MinistryPlatform.apiSoap.GetGridDataFull(Samson.Core.MinistryPlatform.GetGridDataFullRequest request) {
            return base.Channel.GetGridDataFull(request);
        }
        
        public System.Data.DataTable GetGridDataFull(
                    string GUID, 
                    string Password, 
                    int UserID, 
                    int TabID, 
                    int SelectionID, 
                    int ViewID, 
                    string OrderBy, 
                    int PageNumber, 
                    string SearchTerm, 
                    int MonthFilter, 
                    int YearFilter, 
                    bool ORSearch, 
                    out int ResultsCount, 
                    out string OrderByUsed, 
                    out string ColumnList, 
                    out string PrimaryKeyField) {
            Samson.Core.MinistryPlatform.GetGridDataFullRequest inValue = new Samson.Core.MinistryPlatform.GetGridDataFullRequest();
            inValue.GUID = GUID;
            inValue.Password = Password;
            inValue.UserID = UserID;
            inValue.TabID = TabID;
            inValue.SelectionID = SelectionID;
            inValue.ViewID = ViewID;
            inValue.OrderBy = OrderBy;
            inValue.PageNumber = PageNumber;
            inValue.SearchTerm = SearchTerm;
            inValue.MonthFilter = MonthFilter;
            inValue.YearFilter = YearFilter;
            inValue.ORSearch = ORSearch;
            Samson.Core.MinistryPlatform.GetGridDataFullResponse retVal = ((Samson.Core.MinistryPlatform.apiSoap)(this)).GetGridDataFull(inValue);
            ResultsCount = retVal.ResultsCount;
            OrderByUsed = retVal.OrderByUsed;
            ColumnList = retVal.ColumnList;
            PrimaryKeyField = retVal.PrimaryKeyField;
            return retVal.GetGridDataFullResult;
        }
        
        public System.Threading.Tasks.Task<Samson.Core.MinistryPlatform.GetGridDataFullResponse> GetGridDataFullAsync(Samson.Core.MinistryPlatform.GetGridDataFullRequest request) {
            return base.Channel.GetGridDataFullAsync(request);
        }
        
        public System.Data.DataTable GetCommunicationsData(string GUID, string Password, int UserID, int PageID, int ViewID, int SelectionID, int PageNumber, string OrderBy, string SearchTerm) {
            return base.Channel.GetCommunicationsData(GUID, Password, UserID, PageID, ViewID, SelectionID, PageNumber, OrderBy, SearchTerm);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetCommunicationsDataAsync(string GUID, string Password, int UserID, int PageID, int ViewID, int SelectionID, int PageNumber, string OrderBy, string SearchTerm) {
            return base.Channel.GetCommunicationsDataAsync(GUID, Password, UserID, PageID, ViewID, SelectionID, PageNumber, OrderBy, SearchTerm);
        }
        
        public System.Data.DataSet GetFormData(string GUID, string Password, int TabID, int RecordID) {
            return base.Channel.GetFormData(GUID, Password, TabID, RecordID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetFormDataAsync(string GUID, string Password, int TabID, int RecordID) {
            return base.Channel.GetFormDataAsync(GUID, Password, TabID, RecordID);
        }
        
        public System.Data.DataSet ExecuteStoredProcedure(string GUID, string Password, string StoredProcedureName, string RequestString) {
            return base.Channel.ExecuteStoredProcedure(GUID, Password, StoredProcedureName, RequestString);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> ExecuteStoredProcedureAsync(string GUID, string Password, string StoredProcedureName, string RequestString) {
            return base.Channel.ExecuteStoredProcedureAsync(GUID, Password, StoredProcedureName, RequestString);
        }
    }
}
